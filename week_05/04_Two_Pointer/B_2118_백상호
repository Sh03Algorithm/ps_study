package baekjun.study;

import java.io.BufferedReader;
import java.io.InputStreamReader;

public class Two_tower {
    private void solution() throws Exception {
        BufferedReader br = new BufferedReader(new InputStreamReader(System.in), 1 << 17);
        int n = Integer.parseInt(br.readLine());
        
        // 입력값으로 각 탑의 높이를 받아서 배열 arr에 저장하고, 전체 합을 구함
        int[] arr = new int[n];
        int sum = 0;
        for (int i = 0; i < n; i++) {
            arr[i] = Integer.parseInt(br.readLine());
            sum += arr[i];
        }
        
        // 탑을 나누는 인덱스와 그에 따른 높이의 합을 초기화
        int leftIndex = 0;
        int rightIndex = 1;
        int leftSum = arr[0];
        int rightSum = sum - arr[0];
        
        // 답을 저장할 변수를 초기화
        int answer = 0;
        
        // 탑을 나누는 인덱스가 배열의 끝에 도달할 때까지 반복
        while (leftIndex < n) {
            // 현재 상태에서의 두 부분배열의 최소 합 중 최대값을 구함
            answer = Math.max(answer, Math.min(leftSum, rightSum));
            
            // 두 부분배열의 합이 같으면 최대값을 출력하고 종료
            if (leftSum == rightSum) {
                System.out.println(answer);
                return;
            } 
            
            // 왼쪽 부분배열의 합이 오른쪽 부분배열의 합보다 큰 경우,
            // 왼쪽 인덱스를 증가시키고 해당 값을 왼쪽 부분배열의 합에서 빼고,
            // 오른쪽 부분배열의 합에 더함
            else if (leftSum > rightSum) {
                leftSum -= arr[leftIndex];
                rightSum += arr[leftIndex];
                leftIndex++;
            } 
            
            // 오른쪽 부분배열의 합이 왼쪽 부분배열의 합보다 큰 경우,
            // 오른쪽 인덱스를 증가시키고 해당 값을 오른쪽 부분배열의 합에서 빼고,
            // 왼쪽 부분배열의 합에 더함
            else {
                rightSum -= arr[rightIndex];
                leftSum += arr[rightIndex];
                rightIndex++;
                rightIndex %= n;
            }
        }
        
        System.out.println(answer);
    }

    public static void main(String[] args) throws Exception {
        new Two_tower().solution();
    }
}
