package baekjun.study;

import java.util.Arrays;
import java.util.Scanner;

public class wifi {
    public static void main(String[] args) {
        Scanner sc = new Scanner(System.in);
        int n = sc.nextInt(); // 집의 개수
        int c = sc.nextInt(); // 공유기의 개수
        int[] x = new int[n];

        // 집 좌표 입력
        for (int i = 0; i < n; i++) {
            x[i] = sc.nextInt();
        }

        // 좌표 정렬
        Arrays.sort(x);

        // 이진 탐색 설정
        int low = 1; // 최소 거리
        int high = x[n - 1] - x[0]; // 최대 거리
        int result = 0;

        while (low <= high) {
            int mid = (low + high) / 2; // 가능한 거리 간격

            if (canPlaceRouters(x, n, c, mid)) {
                result = mid; // 가능한 경우, 결과를 갱신하고 더 큰 간격 시도
                low = mid + 1;
            } else {
                high = mid - 1; // 불가능한 경우, 간격을 줄임
            }
        }

        System.out.println(result); // 가장 인접한 두 공유기 사이의 최대 거리 출력
    }

    private static boolean canPlaceRouters(int[] x, int n, int c, int distance) {
        int count = 1; // 첫 번째 집에 공유기를 설치
        int lastPosition = x[0];

        for (int i = 1; i < n; i++) {
            if (x[i] - lastPosition >= distance) {
                count++;
                lastPosition = x[i];
                if (count == c) {
                    return true;
                }
            }
        }
        return false;
    }
}
